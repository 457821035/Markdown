#Junit

***
##Jmeter
###1. 简介
Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器，Web应用 等等。
JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。
另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。
###2. 文件结构
<pre>
* /bin 目录（常用文件介绍）
	examples：目录下包含Jmeter使用实例
	ApacheJMeter.jar：JMeter源码包
	jmeter.bat：windows下启动文件
	jmeter.sh：Linux下启动文件
	jmeter.log：Jmeter运行日志文件
	jmeter.properties：Jmeter配置文件
	jmeter-server.bat：windows下启动负载生成器服务文件
	jmeter-server：Linux下启动负载生成器文件

* /docs目录——Jmeter帮助文档

* /extras目录——提供了对Ant的支持文件，可也用于持续集成

* /lib目录——存放Jmeter依赖的jar包，同时安装插件也放于此目录

* /licenses目录——软件许可文件，不用管

* /printable_docs目录——Jmeter用户手册
</pre>
###3. 常用控件
* **测试计划**
**理解**：包含一个测试的所有内容，包含所有的控件，属性，变量。所以一个jmx文件中只有有一个测试计划。测试计划中可以定义变量，引入jar包，编辑测试模式等。

	**注意事项**：

	可将一些不常变化的数据存入测试计划的变量，方便在测试计划内调用（例如服务器ip，端口，数据库ip等）。

	函数测试模式会记录来每个请求到服务器的取样结果，如果在监听器中定义了数据写入文件，会将这些输入写入到该文件中。同时，该模式会严重影响性能。
* **工作台**
**理解**：控件的暂存区域，在测试过程中可以把暂时不用的控件放入其中，待测试完成后放回原来的位置。

	**注意事项**：工作台中的控件不会保存在jmx文件中，所以，如果关闭jmeter，工作台中的控件会丢失。

* **Property Display**
**功能**：查看当前测试计划中的属性以及系统中的属性

* **线程组**
**理解**：一个**虚拟用户组**，线程组内线程数量在运行过程中不会发生改变。

**注意事项**：线程间变量相互独立。一个测试计划内可以包含多个线程组。

**可定义内容**：取样器错误后执行的操作：继续执行，启动下一个线程，停止线程，停止测试，立刻停止

**线程属性**：线程数量，线程启动间隔时间（0为立刻启动所有线程），单线程循环次数，线程执行顺序，是否使用调度器。

调度器配置：持续时间，启动延迟，启动时间，结束时间

***
##Cobertura

###1. 简介
Cobertura 是一种开源工具，它通过检测基本的代码，并观察在测试包运行时执行了哪些代码和没有执行哪些代码，来测量测试覆盖率。

###2. 原理过程
cobertura执行过程大致如下： 
1. 使用instrument修改我们编译后的class文件。 
2. 执行测试，测试数据输出到xxx.ser中。 
3. 使用report生成覆盖率报告。

###3. 功能模块

* **instrument**
cobertura使用instrument修改我们编译后的class文件，在代码里面加入cobertura的统计代码。并生成一个.ser文件（用于覆盖率数据的输出）。
在使用instrument执行的过程中，CoberturaInstrumenter会首先调用分析监听器分析给定的编译好的.class，获得touchPoint（可以认为对应于源代码中的待覆盖行）以及需要的其他信息。然后调用注入监听器将信息注入到新的.class中，保存到\target\generated-classes目录下。

* **执行测试**
为了在测试用例执行时，调用cobertura修改过的.class命令。classpath设置时，instrumented classes 要在original (uninstrumented) classes前面。这样测试时就会引用cobertura修改过的.class。测试信息写入到cobertura.ser档案文件。

* **生成报告**
从cobertura.ser获取覆盖率数据，然后结合src中提供的源代码，生成最终的覆盖率报告，放到了target\site\cobertura路径下。

###4. Maven部署

* pom.xml(html已转义)
<pre>
	<code>
	&lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
    &lt;/properties&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.5.1&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                       &lt;!-- &lt;phase&gt;process-classes&lt;/phase&gt; --&gt;
                        &lt;phase&gt;process-test-classes&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;cobertura&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;


    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
	</code>
</pre>

* 生成报告
{project}/target/site/cobertura/{specific-class-report}.html

* 插件根据Maven的lifecycle中.ser文件对生成类进行修改再编译
{project}/target/cobertura/cobertura.ser

![cobertura覆盖率测试图](https://raw.githubusercontent.com/457821035/Markdown/master/image/junit-cobertura-1.png?token=ARg9MNf-KWYasBFjPijOtNdfGQGNCwtuks5Z31irwA%3D%3D)

***
##Mock-Object
###1. 简介
Mock通常是指，在测试一个对象A时，我们构造一些假的对象来模拟与A之间的交互，而这些Mock对象的行为是我们事先设定且符合预期。通过这些Mock对象来测试A在正常逻辑，异常逻辑或压力情况下工作是否正常。

引入Mock最大的优势在于：Mock的行为固定，它确保当你访问该Mock的某个方法时总是能够获得一个没有任何逻辑的直接就返回的预期结果。

Mock Object的使用通常会带来以下一些好处：
* 隔绝其他模块出错引起本模块的测试错误。
* 隔绝其他模块的开发状态，只要定义好接口，不用管他们开发有没有完成。
* 一些速度较慢的操作，可以用Mock Object代替，快速返回。

对于分布式系统的测试，使用Mock Object会有另外两项很重要的收益：
* 通过Mock Object可以将一些分布式测试转化为本地的测试
* 将Mock用于压力测试，可以解决测试集群无法模拟线上集群大规模下的压力
###2. 应用场景
在使用Mock的过程中，发现Mock是有一些通用性的，对于一些应用场景，是非常适合使用Mock的：
* 真实对象具有不可确定的行为(产生不可预测的结果，如股票的行情)
* 真实对象很难被创建(比如具体的web容器)
* 真实对象的某些行为很难触发(比如网络错误)
* 真实情况令程序的运行速度很慢
* 真实对象有用户界面
* 测试需要询问真实对象它是如何被调用的(比如测试可能需要验证某个回调函数是否被调用了)
* 真实对象实际上并不存在(当需要和其他开发小组，或者新的硬件系统打交道的时候，这是一个普遍的问题)
* 
当然，也有一些不得不Mock的场景：
* 一些比较难构造的Object：这类Object通常有很多依赖，在单元测试中构造出这样类通常花费的成本太大。
* 执行操作的时间较长Object：有一些Object的操作费时，而被测对象依赖于这一个操作的执行结果，例如大文件写操作，数据的更新等等，出于测试的需求，通常将这类操作进行Mock。
* 异常逻辑：一些异常的逻辑往往在正常测试中是很难触发的，通过Mock可以人为的控制触发异常逻辑。
* 
在一些压力测试的场景下，也不得不使用Mock，例如在分布式系统测试中，通常需要测试一些单点（如namenode，jobtracker）在压力场景下的工作是否正常。而通常测试集群在正常逻辑下无法提供足够的压力（主要原因是受限于机器数量），这时候就需要应用Mock去满足。

###3. 框架(EasyMock)
（待补）
***
##持续集成
###1. 概念
持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成，每次的集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早发现集成错误。简单来说，就是持续的定时的在多个团队成员的工作中进行集成，并且给予反馈。

**基本要求**：要将这种实践付诸实际，需要一些必要的条件，如下：
1. 一个自动构建过程，包括自动编译、分发、部署和测试等
2. 一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。
3. 一个持续集成服务器。

自动化构建成过程，可帮助我们节省大量时间，完成这个过程的自动化后，在以后的开发过程中，我们需要做的，就是只是提交代码到版本库中，构建自动完成，基本不再需要人工干预。

代码仓库作为构建的素材库，构建所需的代码从代码库中获得。

最好有一台服务器单独作为持续集成服务器，一方面保证了环境的纯净，一方面不影响开发，而且持续集成服务器一般是随时准备开始构建的，所以一般也不关机。

###2. 工具(Jenkins + git)
**功能：**
1.定时拉取代码并编译

2.静态代码分析

3.定时打包发布测试版

4.自定义额外的操作，如跑单元测试等

5.出错提醒

基本上都是持续集成实践中的要求和周边的一些实现措施，如提醒功能等，出错后及时提醒开发者修复，Jenkins 中通过配置 SMTP 配置信息（这个一般的邮件服务提供商都有提供），邮件模板等，创建事件触发器，在事件（如编译失败）发生时，及时发送邮件通知开发者，挺方便的。

![](https://raw.githubusercontent.com/457821035/Markdown/master/image/junit-jenkins-1.png?token=ARg9MOUdZBkFBk470znBuZaRul668AWAks5Z313wwA%3D%3D)
![](https://raw.githubusercontent.com/457821035/Markdown/master/image/junit-jenkins-2.png?token=ARg9MG91AWBj2YDKBwTye8FTLgvnVz7jks5Z3146wA%3D%3D)

系统的工作流程大概分为以下几步:

1. 开发者将新版本push到git server (Gitlab)。

2. Gitlab随后触发jenkins master结点进行一次build。(通过web hook或者定时检测)

3. jenkins master结点将这个build任务分配给若干个注册的slave结点中的一个，这个slave结点根据一个事先设置好的脚本进行build。这个脚本可以做的事情很多，比如编译，测试，生成测试报告等等。这些原本需要手动完成的任务都可以交给jenkins来做。

4. 我们在build中要进行编译，这里使用了分布式编译器distcc来加快编译速度。

**notes:**
jenkins的工作原理是先将源代码从gitlab中拷贝一份到本地，然后根据设置的脚本进行build。我们可以看出，整个系统的关键就是那个build脚本，用来告诉jenkins在一次集成中需要执行的任务。

**jenkins配置**
(待补)


